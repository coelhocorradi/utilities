package br.com.utilities.utils;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Iterator;

import javax.naming.AuthenticationException;
import javax.naming.Context;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attributes;
import javax.naming.directory.SearchControls;
import javax.naming.directory.SearchResult;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;

import br.com.globalvalue.biblioteca.util.ldap.LdapUser;

public class LdapUtil {
	private String username;
	private String password;
	private String[] dc;
	private String providerUrl;

	public LdapUtil(String username, String password, String[] dc, String providerUrl) {
		this.username = username;
		this.password = password;
		this.dc = dc;
		this.providerUrl = providerUrl;
	}

	public LdapUtil(String username, String password, String providerUrl) {
		this.username = username;
		this.password = password;
		this.providerUrl = providerUrl;
	}

	/**
	 * Retorna true se o usuário for autenticado corretamente no LDAP e false caso
	 * contrário
	 * 
	 * @return
	 * @throws NamingException
	 */
	public boolean autenticarLdap() throws NamingException {
		try {
			LdapContext context = getLdapContext();
			context.close();
			return true;
		} catch (AuthenticationException e) {
			return false;
		}
	}

	/**
	 * Retorna os dados de um usuário no LDAP
	 * 
	 * @return
	 * @throws AuthenticationException
	 * @throws NamingException
	 */
	public LdapUser getLdapUser(String username) throws AuthenticationException, NamingException {
		LdapUser ldapUser = null;

		// retira o dominio da váriavel de usuário... globalvalue\\gv990332 ou
		// gv990332@globalvalue.com.br vira gv990332
		String userNameSemDominio = "";
		if (username.indexOf("@") >= 0) {
			String[] temp = username.split("@");
			userNameSemDominio = temp[0];
		} else if (username.indexOf("\\") >= 0) {
			String[] temp = username.split("\\\\");
			userNameSemDominio = temp[1];
		} else {
			userNameSemDominio = username;
		}

		String searchFilter = "(&(objectClass=user)(samAccountName=" + userNameSemDominio + "))"; // filtro de pesquisa
																									// para usuário
																									// único
		Collection ldapUsers = getLdapUsers(searchFilter);
		if (ldapUsers.size() > 0) {
			ArrayList users = (ArrayList) ldapUsers;
			ldapUser = (LdapUser) users.get(0);
		}

		return ldapUser;
	}

	/**
	 * Retorna os dados do usuário logado no LDAP
	 * 
	 * @return
	 * @throws AuthenticationException
	 * @throws NamingException
	 */
	public LdapUser getLdapUser() throws AuthenticationException, NamingException {
		return getLdapUser(this.username);
	}

	/**
	 * Retorna dados de vários usuários no LDAP
	 * 
	 * @param searchFilter
	 * @return
	 * @throws NamingException
	 */
	public Collection getLdapUsers(String searchFilter) throws NamingException {
		LdapContext context = getLdapContext();
		Collection ldapUsers = new ArrayList();

		// Create the search controls
		SearchControls searchCtls = new SearchControls();

		// Specify the attributes to return
		String returnedAtts[] = { "displayName", "mail", "title", "samAccountName", "givenName", "sn", "initials",
				"company", "department", "telephoneNumber" };
		searchCtls.setReturningAttributes(returnedAtts);

		// Specify the search scope
		searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);

		// specify the LDAP search filter
		// String searchFilter = "(&(objectClass=user)(mail=*))";

		// Specify the Base for the search
		String searchBase = getDcStr(); // "DC=globalvalue,DC=com,DC=br";

		// Search for objects using the filter
		NamingEnumeration answer = context.search(searchBase, searchFilter, searchCtls);

		// Loop through the search results
		while (answer.hasMoreElements()) {
			SearchResult sr = (SearchResult) answer.next();

			Attributes attrs = sr.getAttributes();
			if (attrs != null) {
				LdapUser ldapUser = new LdapUser();
				if (attrs.get("company") != null && attrs.get("company").get() != null) {
					ldapUser.setCompany(attrs.get("company").get().toString());
				}
				if (attrs.get("department") != null && attrs.get("department").get() != null) {
					ldapUser.setDepartment(attrs.get("department").get().toString());
				}
				if (attrs.get("displayName") != null && attrs.get("displayName").get() != null) {
					ldapUser.setDisplayName(attrs.get("displayName").get().toString());
				}
				if (attrs.get("givenName") != null && attrs.get("givenName").get() != null) {
					ldapUser.setGivenName(attrs.get("givenName").get().toString());
				}
				if (attrs.get("initials") != null && attrs.get("initials").get() != null) {
					ldapUser.setInitials(attrs.get("initials").get().toString());
				}
				if (attrs.get("mail") != null && attrs.get("mail").get() != null) {
					ldapUser.setMail(attrs.get("mail").get().toString());
				}
				if (attrs.get("samAccountName") != null && attrs.get("samAccountName").get() != null) {
					ldapUser.setSamAccountName(attrs.get("samAccountName").get().toString());
				}
				if (attrs.get("sn") != null && attrs.get("sn").get() != null) {
					ldapUser.setSn(attrs.get("sn").get().toString());
				}
				if (attrs.get("telephoneNumber") != null && attrs.get("telephoneNumber").get() != null) {
					ldapUser.setTelephoneNumber(attrs.get("telephoneNumber").get().toString());
				}
				if (attrs.get("title") != null && attrs.get("title").get() != null) {
					ldapUser.setTitle(attrs.get("title").get().toString());
				}

				ldapUsers.add(ldapUser);
			}

		} // while
		context.close();

		return ldapUsers;
	}

	/**
	 * Metodo para criar conexão com o LDAP.
	 * 
	 * @return
	 * @throws AuthenticationException
	 * @throws NamingException
	 */
	private LdapContext getLdapContext() throws AuthenticationException, NamingException {
		Hashtable env = new Hashtable();
		env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
		env.put(Context.PROVIDER_URL, providerUrl);
		env.put(Context.SECURITY_AUTHENTICATION, "simple");
		env.put(Context.SECURITY_CREDENTIALS, password);
		env.put(Context.SECURITY_PRINCIPAL, username); // usuario@globalvalue.com.br ou globalvalue\\usuario

		LdapContext context = new InitialLdapContext(env, null);

		return context;
	}

	/**
	 * Metodo interno para criar uma String desse tipo:
	 * "DC=globalvalue,DC=com,DC=br"
	 * 
	 * @return
	 */
	private String getDcStr() {
		if (dc == null) {
			return "";
		}

		StringBuffer dcStr = new StringBuffer();
		for (int i = 0; i < dc.length; i++) {
			dcStr.append("DC=");
			dcStr.append(dc[i]);

			if (i != dc.length - 1) { // não coloca virgula no último
				dcStr.append(",");
			}
		}

		return dcStr.toString();
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// inicializando o componente de autenticação com dados do usuário e do servidor
		// ldap
		LdapUtil ldapUtil = new LdapUtil("ef\\glauber", "156101gtm!", "LDAP://10.0.0.100/dc=EF,dc=LOCAL");
		// LdapUtil ldapUtil = new LdapUtil("gv990332@globalvalue.com.br", "Nfmqad13",
		// "LDAP://gvsnlm018.globalvalue.com.br/DC=globalvalue,DC=com,DC=br");

		try {
			// EXEMPLO DE VALIDAÇÃO DE AUTENTICAÇÃO
			if (ldapUtil.autenticarLdap()) {
				System.out.println("usuário logado");
			} else {
				System.out.println("usuário não logado");
				return;
			}

			// EXEMPLO DE REQUISIÇÃO DE DADOS DE UM USUÁRIO DA BASE DO LDAP
			// lembrando que para pegar os dados do usuário, é feito um novo login no LDAP,
			// então, não colocar isso em todas as páginas de um sistema! Pegue uma vez, e
			// guarde na session.
			LdapUser ldapUser = ldapUtil.getLdapUser();
			System.out.println("Nome: " + ldapUser.getGivenName());
			System.out.println("Email: " + ldapUser.getMail());

			// EXEMPLO DE QUERY NA BASE DO LDAP
			System.out.println("\n\nEXEMPLO DE QUERY NA BASE DO LDAP:");
			Collection ldapUsers = ldapUtil.getLdapUsers("(&(objectClass=user)(givenName=*)(samAccountName=gv*))"); // todos
																													// os
																													// objetos
																													// do
																													// tipo
																													// user,
																													// e
																													// que
																													// o
																													// nome
																													// começam
																													// com
																													// B
			Iterator itLdap = ldapUsers.iterator();
			while (itLdap.hasNext()) {
				LdapUser user = (LdapUser) itLdap.next();
				if (user.getMail() != null) {
					String codigo = user.getSamAccountName();
					codigo = codigo.toLowerCase().replaceAll("gv", "");
					System.out.println(codigo + ";" + user.getGivenName() + " " + user.getSn() + ";" + user.getMail());
				}
			}

		} catch (NamingException e) {

		}
	}

}
